Shader "Custom RP/Unlit"
{
    Properties
    {        
        _BaseColor ("Base Color", Color) = (1,1,1,1)
    }
        SubShader
    {
        Tags { "RenderType" = "Opaque" }
        LOD 100

        Pass
        {
            HLSLPROGRAM                        

            //for CBUFFER_START
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"

            //SRP Batcher
            CBUFFER_START(UnityPerDraw)
                float4x4 unity_ObjectToWorld;
                float4x4 unity_WorldToObject;
                float4 unity_LODFade;
                real4 unity_WorldTransformParams;                
            CBUFFER_END
            
            float4x4 unity_MatrixV;
            float4x4 unity_MatrixVP;
            float4x4 glstate_matrix_projection;               

            #define UNITY_MATRIX_M unity_ObjectToWorld
            #define UNITY_MATRIX_I_M unity_WorldToObject
            #define UNITY_MATRIX_V unity_MatrixV
            #define UNITY_MATRIX_VP unity_MatrixVP
            #define UNITY_MATRIX_P glstate_matrix_projection            
            
            //for UNITY_INSTANCING_BUFFER_START UNITY_MATRIX_M ...
            //放在SpaceTransforms之前 #define UNITY_MATRIX_...之后
            //重新定义了宏(UNITY_MATRIX_...) 来访问实例数据数组            
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/SpaceTransforms.hlsl"                        
            // #include "../ShaderLibrary/UnityInput.hlsl"                                                              

            #pragma multi_compile_instancing
            #pragma vertex vert
            #pragma fragment frag            

            //SRP Batcher instancing
            UNITY_INSTANCING_BUFFER_START(UnityPerMaterial)
                UNITY_DEFINE_INSTANCED_PROP(float4, _BaseColor)                
            UNITY_INSTANCING_BUFFER_END(UnityPerMaterial)

            struct Attributes
            {
                float3 vertex : POSITION;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };

            struct Varying
            {
                float4 position : SV_POSITION;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };

            Varying vert(Attributes input)
            {
                Varying output;
                UNITY_SETUP_INSTANCE_ID(input);
                UNITY_TRANSFER_INSTANCE_ID(input, output);

                //UnityInstancing中重新定义了UNITY_MATRIX_M 根据当前渲染的对象索引访问unity_ObjectToWorldArray
                //所以GPU instancing时不能直接使用unity_ObjectToWorld
                // output.position = mul(unity_MatrixVP, mul(unity_ObjectToWorld, float4(input.vertex,1.0)));
                output.position = mul(unity_MatrixVP, mul(UNITY_MATRIX_M, float4(input.vertex,1.0)));

                // float3 ws = TransformObjectToWorld(input.vertex);
                // output.position = TransformWorldToHClip(ws);                

                return output;
            }

            float4 frag(Varying input) : SV_Target
            {
                UNITY_SETUP_INSTANCE_ID(input);
                return UNITY_ACCESS_INSTANCED_PROP(UnityPerMaterial, _BaseColor);
            }
            ENDHLSL
        }
    }
}
